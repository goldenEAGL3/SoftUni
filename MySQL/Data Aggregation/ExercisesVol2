Write a query that returns all unique wizard first letters of their first names only if they have deposit of type Troll Chest.
Order them alphabetically. Use GROUP BY for uniqueness.

SELECT SUBSTRING(`first_name`, 1, 1) AS `first_letter`
FROM `wizzard_deposits`
WHERE `deposit_group` = 'Troll Chest'
GROUP BY `first_letter`
ORDER BY `first_letter`;

--------------------------------------------------------------------------------------------------------------------------------------------
Mr. Bodrog is highly interested in profitability.
He wants to know the average interest of all deposits groups split by whether the deposit has expired or not.
But that’s not all. He wants you to select deposits with start date after 01/01/1985.
Order the data descending by Deposit Group and ascending by Expiration Flag.

SELECT `deposit_group`, `is_deposit_expired`, AVG(`deposit_interest`) AS `average_interest`
FROM `wizzard_deposits`
WHERE `deposit_start_date` > '1985/01/01'
GROUP BY `deposit_group`, `is_deposit_expired`
ORDER BY `deposit_group` DESC, `is_deposit_expired`;
--------------------------------------------------------------------------------------------------------------------------------------------
Give Mr. Bodrog some data to play his favorite game Rich Wizard, Poor Wizard.
The rules are simple: You compare the deposits of every wizard with the wizard after him.
If a wizard is the last one in the database, simply ignore it. At the end you have to sum the difference between the deposits.
At the end your query should return a single value: the SUM of all differences.

SELECT SUM(diff.next) AS `sum_difference`
FROM (
SELECT `deposit_amount` - 
							(SELECT 
							`deposit_amount`
                            FROM `wizzard_deposits`
                            WHERE id = wd.id + 1) AS next
		FROM `wizzard_deposits` AS wd) AS diff;
--------------------------------------------------------------------------------------------------------------------------------------------
That’s it! You no longer work for Mr. Bodrog. You have decided to find a proper job as an analyst in SoftUni. 
It’s not a surprise that you will use the soft_uni database. 
Select the minimum salary from the employees for departments with ID (2,5,7) but only for those who are hired after 01/01/2000.
Sort result by department_id in ascending order.
Your query should return:
•	department_id


SELECT `department_id`, MIN(`salary`)
FROM `employees`
WHERE `department_id` IN (2, 5, 7) AND `hire_date` > '2000/01/01'
GROUP BY `department_id`
ORDER BY `department_id`;
--------------------------------------------------------------------------------------------------------------------------------------------
Select all high paid employees who earn more than 30000 into a new table.
Then delete all high paid employees who have manager_id = 42 from the new table;
Then increase the salaries of all high paid employees with department_id =1 with 5000 in the new table.
Finally, select the average salaries in each department from the new table. Sort result by department_id in increasing order.

CREATE TABLE `newTable` 
SELECT * FROM `employees`
WHERE `salary` > 30000;

DELETE  FROM `newTable`
WHERE `manager_id` = 42 AND `employee_id` > 0;

UPDATE `newTable`
SET `salary` = `salary` + 5000
WHERE `department_id` = 1 AND `employee_id` > 0;

SELECT `department_id`, AVG(salary) AS `avg_salary`
FROM `newTable`
GROUP BY `department_id`
ORDER BY `department_id`;
--------------------------------------------------------------------------------------------------------------------------------------------
Find the max salary for each department.
Filter those which have max salaries not in the range 30000 and 70000.
Sort result by department_id in increasing order.

SELECT `department_id`, MAX(`salary`) AS `max_salary`
FROM `employees`
GROUP BY `department_id`
HAVING `max_salary` NOT BETWEEN 30000 AND 70000
ORDER BY `department_id`;
--------------------------------------------------------------------------------------------------------------------------------------------
Count the salaries of all employees who don’t have a manager.

SELECT COUNT(`salary`)
FROM `employees`
WHERE `manager_id` IS NULL;
--------------------------------------------------------------------------------------------------------------------------------------------
Find the third highest salary in each department if there is such. Sort result by department_id in increasing order.

SELECT 
    `department_id`,
    (SELECT DISTINCT
            `e2`.`salary`
        FROM
            `employees` AS `e2`
        WHERE
            `e2`.`department_id` = `e1`.`department_id`
        ORDER BY `e2`.`salary` DESC
        LIMIT 2 , 1) AS `third_highest_salary`
FROM
    `employees` AS `e1`
GROUP BY `department_id`
HAVING `third_highest_salary` IS NOT NULL;
--------------------------------------------------------------------------------------------------------------------------------------------
Write a query that returns:
•	first_name
•	last_name
•	department_id
for all employees who have salary higher than the average salary of their respective departments.
Select only the first 10 rows. Order by department_id.


SELECT `first_name`, `last_name`, `department_id`
FROM `employees` AS e
WHERE e.salary > (SELECT AVG(`salary`)
						FROM `employees` 
							WHERE e.department_id = department_id
								GROUP BY department_id)
ORDER BY `department_id`, `employee_id`
LIMIT 10;
--------------------------------------------------------------------------------------------------------------------------------------------
Create a query which shows the total sum of salaries for each department. Order by department_id.
Your query should return:	
•	department_id


SELECT `department_id`, SUM(`salary`) AS `total_salary`
FROM `employees`
GROUP BY `department_id`
ORDER BY `department_id`;
--------------------------------------------------------------------------------------------------------------------------------------------
